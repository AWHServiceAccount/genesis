<!----->
IReadOnlyRepository
IReadOnlyRepository.cs
using System.Collections.Generic;
using ~DEPS_MODEL_NAMESPACE~;

namespace ~DEPS_NAMESPACE~
{
    public interface ~OBJECT_BASE_CLASS~
    {

    }

    public interface IReadOnlyRepository<TModel, TKey> : ~OBJECT_BASE_CLASS~
        where TModel : ~MODEL_BASE_CLASS~
        where TKey : struct
    {
        Task<TModel> GetById(TKey id);
        Task<IAsyncQueryable<TModel>> Query();
    }
}
<!----->
IRepository
IRepository.cs
using System.Collections.Generic;
using System.Threading.Tasks;
using ~DEPS_MODEL_NAMESPACE~;

namespace ~DEPS_NAMESPACE~
{
    public interface IRepository<TModel, TKey> : IReadOnlyRepository<TModel, TKey>
        where TModel : ~MODEL_BASE_CLASS~
        where TKey : struct
    {
        void CancelAllOperations(bool throwOnFirstException);

        Task<TModel> Upsert(TModel model);
        Task Delete(TKey model);
        Task AddRange(IEnumerable<TModel> models);
        Task<int> SaveChanges(string currentUser);
    }
}